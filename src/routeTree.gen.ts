/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as ProfileImport } from './routes/profile'
import { Route as LoginImport } from './routes/login'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as ClientsIndexImport } from './routes/clients/index'
import { Route as ClientsNewImport } from './routes/clients/new'
import { Route as ClientsClientIdRouteImport } from './routes/clients/$clientId/route'
import { Route as ClientsClientIdIndexImport } from './routes/clients/$clientId/index'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ClientsIndexRoute = ClientsIndexImport.update({
  id: '/clients/',
  path: '/clients/',
  getParentRoute: () => rootRoute,
} as any)

const ClientsNewRoute = ClientsNewImport.update({
  id: '/clients/new',
  path: '/clients/new',
  getParentRoute: () => rootRoute,
} as any)

const ClientsClientIdRouteRoute = ClientsClientIdRouteImport.update({
  id: '/clients/$clientId',
  path: '/clients/$clientId',
  getParentRoute: () => rootRoute,
} as any)

const ClientsClientIdIndexRoute = ClientsClientIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ClientsClientIdRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/clients/$clientId': {
      id: '/clients/$clientId'
      path: '/clients/$clientId'
      fullPath: '/clients/$clientId'
      preLoaderRoute: typeof ClientsClientIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/clients/new': {
      id: '/clients/new'
      path: '/clients/new'
      fullPath: '/clients/new'
      preLoaderRoute: typeof ClientsNewImport
      parentRoute: typeof rootRoute
    }
    '/clients/': {
      id: '/clients/'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof ClientsIndexImport
      parentRoute: typeof rootRoute
    }
    '/clients/$clientId/': {
      id: '/clients/$clientId/'
      path: '/'
      fullPath: '/clients/$clientId/'
      preLoaderRoute: typeof ClientsClientIdIndexImport
      parentRoute: typeof ClientsClientIdRouteImport
    }
  }
}

// Create and export the route tree

interface ClientsClientIdRouteRouteChildren {
  ClientsClientIdIndexRoute: typeof ClientsClientIdIndexRoute
}

const ClientsClientIdRouteRouteChildren: ClientsClientIdRouteRouteChildren = {
  ClientsClientIdIndexRoute: ClientsClientIdIndexRoute,
}

const ClientsClientIdRouteRouteWithChildren =
  ClientsClientIdRouteRoute._addFileChildren(ClientsClientIdRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/clients/$clientId': typeof ClientsClientIdRouteRouteWithChildren
  '/clients/new': typeof ClientsNewRoute
  '/clients': typeof ClientsIndexRoute
  '/clients/$clientId/': typeof ClientsClientIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/clients/new': typeof ClientsNewRoute
  '/clients': typeof ClientsIndexRoute
  '/clients/$clientId': typeof ClientsClientIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/clients/$clientId': typeof ClientsClientIdRouteRouteWithChildren
  '/clients/new': typeof ClientsNewRoute
  '/clients/': typeof ClientsIndexRoute
  '/clients/$clientId/': typeof ClientsClientIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/login'
    | '/profile'
    | '/register'
    | '/clients/$clientId'
    | '/clients/new'
    | '/clients'
    | '/clients/$clientId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/login'
    | '/profile'
    | '/register'
    | '/clients/new'
    | '/clients'
    | '/clients/$clientId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/login'
    | '/profile'
    | '/register'
    | '/clients/$clientId'
    | '/clients/new'
    | '/clients/'
    | '/clients/$clientId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  RegisterRoute: typeof RegisterRoute
  ClientsClientIdRouteRoute: typeof ClientsClientIdRouteRouteWithChildren
  ClientsNewRoute: typeof ClientsNewRoute
  ClientsIndexRoute: typeof ClientsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  RegisterRoute: RegisterRoute,
  ClientsClientIdRouteRoute: ClientsClientIdRouteRouteWithChildren,
  ClientsNewRoute: ClientsNewRoute,
  ClientsIndexRoute: ClientsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/login",
        "/profile",
        "/register",
        "/clients/$clientId",
        "/clients/new",
        "/clients/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/clients/$clientId": {
      "filePath": "clients/$clientId/route.tsx",
      "children": [
        "/clients/$clientId/"
      ]
    },
    "/clients/new": {
      "filePath": "clients/new.tsx"
    },
    "/clients/": {
      "filePath": "clients/index.tsx"
    },
    "/clients/$clientId/": {
      "filePath": "clients/$clientId/index.tsx",
      "parent": "/clients/$clientId"
    }
  }
}
ROUTE_MANIFEST_END */
